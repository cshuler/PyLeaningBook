
import matplotlib.pyplot as plt


# or: 
insta#lling matplotlib using Anaconda: 
conda install matplotlib

#to select certain rows of certain coumns and plot them as a line plot
plt.plot(data['column1'][:12], data['column2'][:12])

# to rotate axes, ytics does the y
plt.xticks(rotation=90)

#Label axes and make title on top of plot
plt.xlabel("anystring")
plt.ylabel("anystring")
plt.title("anystring")


# making multiple subplots, 
fig = plt.figure()    # generate a figure object named fig
ax1 = fig.add_subplot(2,1,1)  # make the figure have multiple plots, 2 rows, 1 col, and plot # 1
ax2 = fig.add_subplot(2,1,2) # 2nd plot row # 2 
plt.show()

#ADDING IN DATA and plotting it
ax1.plot(unrate[:12]['DATE'], unrate[:12]['VALUE'])
ax2.plot(unrate['DATE'][12:24], unrate['VALUE'][12:24])  # note the index order doesn't matter interesting....
plt.show()

# change dimensions of plot (in inches) float value
fig = plt.figure(figsize=(numinches, numinches))

# if you call plot 2 times without specifying subplot then it puts plots on same figure
plt.plot(unrate[0:12]['MONTH'], unrate[0:12]['VALUE'], c="r")
plt.plot(unrate[12:24]['MONTH'], unrate[12:24]['VALUE'], C = "b")




#using plotting skills to plot up Kaitlin well data

wells['well_data_101']['Samp_date'] = pd.to_datetime(wells['well_data_101']['Samp_date'], errors='coerce')
fig = plt.figure(figsize=(18, 4)) # generate a figure object named fig

discharge_plot = fig.add_subplot(1,4,1) # make the figure have multiple plots, 2 rows, 1 col, and plot # 1
flow_plot = fig.add_subplot(1,4,2) # 2nd plot row # 2 
meter_plot = fig.add_subplot(1,4,3) # 2nd plot row # 2 
Cl_plot = fig.add_subplot(1,4,4) # 2nd plot row # 2 
    
discharge_plot.plot(wells['well_data_101']['Samp_date'], wells['well_data_101']['Discharge pressure [PSI]'])
plt.setp(discharge_plot.xaxis.get_majorticklabels(), rotation=45)
discharge_plot.set_ylabel('Discharge pressure [PSI]', fontsize = '12' )





flow_plot.plot(wells['well_data_101']['Samp_date'], wells['well_data_101']['Flow [GPM]'])
plt.setp(flow_plot.xaxis.get_majorticklabels(), rotation=45)
flow_plot.set_ylabel('Flow [GPM]', fontsize = '12' )

meter_plot.plot(wells['well_data_101']['Samp_date'], wells['well_data_101']['Meter reading '])
plt.setp(meter_plot.xaxis.get_majorticklabels(), rotation=45)
meter_plot.set_ylabel('Meter reading', fontsize = '12' )

Cl_plot.plot(wells['well_data_101']['Samp_date'], wells['well_data_101']['Chloride [mg/L]'])
plt.setp(Cl_plot.xaxis.get_majorticklabels(), rotation=45)
Cl_plot.set_ylabel('Chloride [mg/L]', fontsize = '12' )

fig.tight_layout()
plt.show()
    

# BAR PLOTS!
import matplotlib.pyplot as plt
from numpy import arange

bar_heights = (a series or column of X number of values that is the ACTUAL DATA you want to plot.)
bar_positions = arange(X as in X above)  # with no + value the bar starts at 0
or
bar_positions = arange(X as in X above) +.5  # to start the bar a little ways over


fig, ax = plt.subplots()   # nice shortcut for making a figure object and an axes object at same time
ax.bar(bar_positions,bar_heights,.5)    # actually plot the graph with the parameters specified, the last # is the width of the bar. 

tick_positions = [8,9,10,11,12]  # the numerical list of which ticks get displayed
ax.set_xticks(tick_positions)

label_names = ['list of lablel names'..., 'Fandango_Ratingvalue', 'Fandango_Stars']
ax.set_xticklabels(label_names,rotation=90)

ax.set_xlabel('poo')
ax.set_ylabel('pee')
ax.set_title('title!')


#SCATTER PLOTS!
use Axes.scatter(). 
The scatter() method has 2 required parameters, x and y, which matches the parameters of the plot() method

#Define the axes limits (minimum, maximum)
ax.set_xlim(0, 5)
ax.set_ylim(0, 5)





